{"ast":null,"code":"import _asyncToGenerator from \"F:/Research-Flutter-ionic/ionic_test_app/testapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nexport class CameraPreviewWeb extends WebPlugin {\n  constructor() {\n    super({\n      name: 'CameraPreview',\n      platforms: ['web']\n    });\n  }\n  start(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          yield navigator.mediaDevices.getUserMedia({\n            audio: !options.disableAudio,\n            video: true\n          }).then(stream => {\n            // Stop any existing stream so we can request media with different constraints based on user input\n            stream.getTracks().forEach(track => track.stop());\n          }).catch(error => {\n            reject(error);\n          });\n          const video = document.getElementById('video');\n          const parent = document.getElementById(options.parent);\n          if (!video) {\n            const videoElement = document.createElement('video');\n            videoElement.id = 'video';\n            videoElement.setAttribute('class', options.className || '');\n            // Don't flip video feed if camera is rear facing\n            if (options.position !== 'rear') {\n              videoElement.setAttribute('style', '-webkit-transform: scaleX(-1); transform: scaleX(-1);');\n            }\n            const userAgent = navigator.userAgent.toLowerCase();\n            const isSafari = userAgent.includes('safari') && !userAgent.includes('chrome');\n            // Safari on iOS needs to have the autoplay, muted and playsinline attributes set for video.play() to be successful\n            // Without these attributes videoElement.play() will throw a NotAllowedError\n            // https://developer.apple.com/documentation/webkit/delivering_video_content_for_safari\n            if (isSafari) {\n              videoElement.setAttribute('autoplay', 'true');\n              videoElement.setAttribute('muted', 'true');\n              videoElement.setAttribute('playsinline', 'true');\n            }\n            parent.appendChild(videoElement);\n            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n              const constraints = {\n                video: {\n                  width: {\n                    ideal: options.width\n                  },\n                  height: {\n                    ideal: options.height\n                  }\n                }\n              };\n              if (options.position === 'rear') {\n                constraints.video.facingMode = 'environment';\n                _this.isBackCamera = true;\n              } else {\n                _this.isBackCamera = false;\n              }\n              navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n                //video.src = window.URL.createObjectURL(stream);\n                videoElement.srcObject = stream;\n                videoElement.play();\n                resolve({});\n              }, err => {\n                reject(err);\n              });\n            }\n          } else {\n            reject({\n              message: 'camera already started'\n            });\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  stop() {\n    return _asyncToGenerator(function* () {\n      const video = document.getElementById('video');\n      if (video) {\n        video.pause();\n        const st = video.srcObject;\n        const tracks = st.getTracks();\n        for (var i = 0; i < tracks.length; i++) {\n          var track = tracks[i];\n          track.stop();\n        }\n        video.remove();\n      }\n    })();\n  }\n  capture(options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, _) => {\n        const video = document.getElementById('video');\n        const canvas = document.createElement('canvas');\n        // video.width = video.offsetWidth;\n        const context = canvas.getContext('2d');\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        // flip horizontally back camera isn't used\n        if (!_this2.isBackCamera) {\n          context.translate(video.videoWidth, 0);\n          context.scale(-1, 1);\n        }\n        context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n        let base64EncodedImage;\n        if (options.quality != undefined) {\n          base64EncodedImage = canvas.toDataURL('image/jpeg', options.quality / 100.0).replace('data:image/jpeg;base64,', '');\n        } else {\n          base64EncodedImage = canvas.toDataURL('image/png').replace('data:image/png;base64,', '');\n        }\n        resolve({\n          value: base64EncodedImage\n        });\n      });\n    })();\n  }\n  captureSample(_options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.capture(_options);\n    })();\n  }\n  getSupportedFlashModes() {\n    return _asyncToGenerator(function* () {\n      throw new Error('getSupportedFlashModes not supported under the web platform');\n    })();\n  }\n  setFlashMode(_options) {\n    return _asyncToGenerator(function* () {\n      throw new Error('setFlashMode not supported under the web platform');\n    })();\n  }\n  flip() {\n    return _asyncToGenerator(function* () {\n      throw new Error('flip not supported under the web platform');\n    })();\n  }\n  setOpacity(_options) {\n    return _asyncToGenerator(function* () {\n      const video = document.getElementById('video');\n      if (!!video && !!_options['opacity']) {\n        video.style.setProperty('opacity', _options['opacity'].toString());\n      }\n    })();\n  }\n}\nconst CameraPreview = new CameraPreviewWeb();\nexport { CameraPreview };\nimport { registerWebPlugin } from '@capacitor/core';\nregisterWebPlugin(CameraPreview);\n//# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}